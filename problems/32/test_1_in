/************** file: #include "splitWords.h" **************/
// author: Grzegorz Prowadzacy
#ifndef SPLIT_WORDS_H
#define SPLIT_WORDS_H

/** Tresc zadania:
Panstwa zadaniem jest napisanie funkcji splitTextIntoWords(), ktora zrobi to, co mowi jej nazwa, czyli przyjmie ciag znakow i podzieli na wyrazy zwracajac informacje ile w sumie jest tam wyrazow. Parametr words powinien zostaÄ‡ odpowiednio zainicjalizowany. Podzial na wyrazy ma sie odbywac w oparciu o funkcje http://www.cplusplus.com/reference/cctype/isalnum/ . Jesli tekst nie bedzie zawieral zadnego z wyrazow, to parametr words powinien byc zainicjalizowany wartoscia NULL.

Przypadki testowe:
    - text == NULL
    - text jest pusty
    - brak wyrazow
    - jeden wyraz
    - normalne zdanie
    - wzor matematyczny

Prosze tez pamietac aby poza plikiem z rozwiazaniem zalaczyc rowniez ten plik naglowkowy o nazwie splitWords.h, bez robienia w nim jakichkolwiek zmian.

Podpowiedzi:
    - polecam uzyc gotowca do kopiowania tekstu: http://www.cplusplus.com/reference/cstring/
    - polecam miec oddzielna funkcje, ktora zliczy ilosc wyrazow, ktora zostanie uzyta przez splitTextIntoWords
    - jak ktos chce moze sie pobawic najbardziej-duzo-robiaca funkcja jezyka C, czyli realloc: http://www.cplusplus.com/reference/cstdlib/realloc/
**/

#ifdef __cplusplus
    extern "C"
    {
#endif
        long splitTextIntoWords(const char* text, char*** words);
#ifdef __cplusplus
    }
#endif

#endif // SPLIT_WORDS_H




/************** file: "splitWordsTest.cc" **************/
#include <string>
#include <iomanip> // quoted()

#include <gtest/gtest.h>

// #include "splitWords.h"


namespace
{
    using namespace std;
    using namespace ::testing;
}

static void compareWordsLists(const char* const* words, const char* const* wordsExpected, size_t wordCount, const char* originalText);
static void deallocateMemory(char** words, size_t wordCount);


class WordSplitingTest : public ::testing::Test
{
};

TEST_F(WordSplitingTest, nullProvidedInsteadOfText)
{
    constexpr const char* text = NULL;
    constexpr size_t wordCount = 0;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words));
    ASSERT_EQ(NULL, words);
}

TEST_F(WordSplitingTest, singleWord)
{
    constexpr const char* text = "konstantynopolitanczykowianeczka";
    constexpr size_t wordCount = 1;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        text
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, singleNumber)
{
    constexpr const char* text = "4";
    constexpr size_t wordCount = 1;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        text
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, fewWordsSplitedWithSingleSpace)
{
    constexpr const char* text = "Uczciwosc w malych rzeczach nie jest mala rzecza";
    constexpr size_t wordCount = 8;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        "Uczciwosc", "w", "malych", "rzeczach", "nie", "jest", "mala", "rzecza"
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, fewWordsSplitedWithMultipleSpaces)
{
    constexpr const char* text = "Bez  pracy nie   ma     kolaczy";
    constexpr size_t wordCount = 5;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        "Bez", "pracy", "nie", "ma", "kolaczy"
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, sentenceWithPuncts)
{
    constexpr const char* text = "Uniwersytety sa skarbnicami wiedzy: studenci przychodza ze szkol przekonani, ze wiedza juz prawie wszystko; po latach odchodza pewni, ze nie wiedza praktycznie niczego. Gdzie sie podziewa ta wiedza? Zostaje na uniwersytecie, gdzie jest starannie suszona i skladana w magazynach.";
    constexpr size_t wordCount = 39;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        "Uniwersytety", "sa", "skarbnicami", "wiedzy", "studenci", "przychodza", "ze", "szkol", "przekonani", "ze", "wiedza", "juz", "prawie", "wszystko", "po", "latach", "odchodza", "pewni", "ze", "nie", "wiedza", "praktycznie", "niczego", "Gdzie", "sie", "podziewa", "ta", "wiedza", "Zostaje", "na", "uniwersytecie", "gdzie", "jest", "starannie", "suszona", "i", "skladana", "w", "magazynach"
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, mathematicalFormula)
{
    constexpr const char* text = "E = mc^2";
    constexpr size_t wordCount = 3;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        "E", "mc", "2"
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, sentenceStartingWithSpace)
{
    constexpr const char* text = " Oczywiscie te podwyzki podatkow to dla naszego dobra, bo pieniadze, jak wiadomo, psuja charakter. Im wiecej pieniedzy rzad nam skonfiskuje, tym lepiej dla nas. Tak w kazdym razie mysla politycy, ktorzy wprawdzie nieustannie pragna naszego dobra, ale nam niestety juz coraz mniej go zostalo.";
    constexpr size_t wordCount = 44;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);

    constexpr const char *wordsExpected[] = 
    {
        "Oczywiscie", "te", "podwyzki", "podatkow", "to", "dla", "naszego", "dobra", "bo", "pieniadze", "jak", "wiadomo", "psuja", "charakter", "Im", "wiecej", "pieniedzy", "rzad", "nam", "skonfiskuje", "tym", "lepiej", "dla", "nas", "Tak", "w", "kazdym", "razie", "mysla", "politycy", "ktorzy", "wprawdzie", "nieustannie", "pragna", "naszego", "dobra", "ale", "nam", "niestety", "juz", "coraz", "mniej", "go", "zostalo"
    };
    
    compareWordsLists(words, wordsExpected, wordCount, text);
    deallocateMemory(words, wordCount);
}

TEST_F(WordSplitingTest, textWithoutWords)
{
    constexpr const char* text = ":-)";
    constexpr size_t wordCount = 0;
    
    char **words = NULL;
    ASSERT_EQ(wordCount, splitTextIntoWords(text, &words)) << "text: " << quoted(text);
    ASSERT_EQ(NULL, words);
}


////////////////////////////////////////////////////////////////////////////////// main function:
int main(int argc, char *argv[])
{
    ::testing::InitGoogleTest(&argc, argv);
    GTEST_FLAG(print_time) = false;
    return RUN_ALL_TESTS();
}


////////////////////////////////////////////////////////////////////////////////// function definitions:
static void compareWordsLists(const char* const* words, const char* const* wordsExpected, size_t wordCount, const char* originalText)
{
    for(size_t i=0; i<wordCount; ++i)
    {
        EXPECT_STREQ(wordsExpected[i], words[i]) << "i=" << i << ", original text: " << quoted(originalText);
    }
}

static void deallocateMemory(char** words, size_t wordCount)
{
    if (nullptr == words)
    {
        return;
    }
    
    for (size_t i=0; i<wordCount; ++i)
    {
        free(words[i]);
    }
    free(words);
}

// vim: ft=cpp
