/************** file: #include "basename.h" **************/
#ifndef TEXT_SEARCHING_H
#define TEXT_SEARCHING_H

/** Tresc zadania:
Panstwa zadaniem jest napisanie funkcji findWordInTextReturningPosition(), ktora dla podanego tekstu znajdzie szukane slowo, ale:
1) jesli dane slowo znajduje sie w tekscie prosze zwrocic indeks pozycji na ktorym sie znajduje
2) jesli nie znaleziono prosze zwrocic -1
3) funkcja ma ignorowac wielkosc liter, podpowiedz:
   http://www.cplusplus.com/reference/cctype/tolower/
4) Jako kolejny argument podajemy kierunek wyszukiwania tekstu

Prosze tez pamietac aby poza plikiem z rozwiazaniem zalaczyc rowniez ten plik naglowkowy o nazwie basename.h, bez robienia w nim jakichkolwiek zmian.


Podpowiedzi:
- Polecam maksymalnie rozbic to na funkcje
- Polecam tez zastosowac duza ilosc funkcji do operowania na tekscie: http://www.cplusplus.com/reference/cstring/
  mozna sobie np. skopiowac tekst do innej tablicy zamieniajac na male litery i na tym szukac przy uzyciu gotowych funkcji do wyszukiwania.
**/

enum TextSearchingDirection
{
    TEXT_SEARCHING_DIRECTION_FROM_BEGINNING,
    TEXT_SEARCHING_DIRECTION_FROM_END
};


#ifdef __STDC__
    typedef enum TextSearchingDirection TextSearchingDirection;
#endif


#ifdef __cplusplus
    extern "C"
    {
#endif
        int findWordInTextReturningPosition(const char text[], const char word[], TextSearchingDirection searchDirection);
#ifdef __cplusplus
    }
#endif

#endif // TEXT_SEARCHING_H


/************** file: "basenameTest.cc" **************/
#include <gtest/gtest.h>

//#include "textSearching.h"


namespace
{
    using namespace std;
    using namespace ::testing;
}

class Task5TextSearchingTest : public ::testing::Test
{
};

TEST_F(Task5TextSearchingTest, searchWordInTheSameLetterCaseFromBeginning)
{
    constexpr const char text[] = "Ala ma kota";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(7, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, searchWordInTheSameLetterCaseFromTheEnd)
{
    constexpr const char text[] = "kot ma Ale czy Ala ma kota";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(22, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_END)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, searchWordInTheSameLetterCaseFromBeginningWordInTheBeginning)
{
    constexpr const char text[] = "Ala ma kota";
    constexpr const char needle[] = "Ala";

    ASSERT_EQ(0, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, searchWordInTheSameLetterCaseFromBeginningWordInTheEnd)
{
    constexpr const char text[] = "Ali jest ten kot";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(13, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, searchWordInDifferentLetterCaseFromBeginning)
{
    constexpr const char text[] = "Ala wyszla za Kota";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(14, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, findFirstOccurenceOfWordInTheSameLetterCase)
{
    constexpr const char text[] = "Ala ma kota, kot kotu niekotowaty";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(7, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, findLastOccurenceOfWordInTheSameLetterCase)
{
    constexpr const char text[] = "Ala ma kota, kot kotu niekotowaty";
    constexpr const char needle[] = "kot";

    ASSERT_EQ(25, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_END)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, findFirstOccurenceOfWordDifferentLetterCase)
{
    constexpr const char text[] = "Ala ma Kota, ale ten Kot ma sie tak do kota jak krzeslo do krzesla elektrycznego";
    constexpr const char needle[] = "KOT";

    ASSERT_EQ(7, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, findLastOccurenceOfWordDifferentLetterCase)
{
    constexpr const char text[] = "Ala ma Kota, ale ten Kot ma sie tak do kota jak krzeslo do krzesla elektrycznego";
    constexpr const char needle[] = "KOT";

    ASSERT_EQ(7, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}

TEST_F(Task5TextSearchingTest, searchWordWhenTheWordNotInText)
{
    constexpr const char text[] = "Ala ma kota";
    constexpr const char needle[] = "pies";

    ASSERT_EQ(-1, findWordInTextReturningPosition(text, needle, TEXT_SEARCHING_DIRECTION_FROM_BEGINNING)) << "original text: " << text << "\nneedle: " << needle;
}


int main(int argc, char *argv[])
{
    ::testing::InitGoogleTest(&argc, argv);
    GTEST_FLAG(print_time) = false;
    return RUN_ALL_TESTS();
}
